// This is your Prisma schema file for Second-Hand Marketplace
// Database: PostgreSQL
// ORM: Prisma
// Project: South African Second-Hand Marketplace

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum ListingCategory {
  ELECTRONICS
  CLOTHING
  HOME_GARDEN
  SPORTS
  BOOKS
  TOYS
  VEHICLES
  COLLECTIBLES
  BABY_KIDS
  PET_SUPPLIES
}

enum ListingCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum PricingType {
  FIXED
  OFFERS
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  SOLD
  PAUSED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  COUNTERED
}

enum AdminAction {
  // Listing actions
  APPROVE_LISTING
  REJECT_LISTING
  PAUSE_LISTING
  RESTORE_LISTING
  DELETE_LISTING

  // User actions
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  UPDATE_USER_ROLE
  BAN_USER
  UNBAN_USER

  // Category actions
  CREATE_CATEGORY
  UPDATE_CATEGORY
  MERGE_CATEGORIES
  DELETE_CATEGORY
  TOGGLE_CATEGORY_STATUS

  // System actions
  UPDATE_SETTINGS
  VIEW_AUDIT_LOG
  EXPORT_DATA
}

enum AuditTargetType {
  LISTING
  USER
  CATEGORY
  TRANSACTION
  SYSTEM
}

// ============================================================================
// MODELS
// ============================================================================

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  name                String
  phone               String?
  city                String?
  province            String?
  role                UserRole  @default(BUYER)
  profileImage        String?
  rating              Float     @default(0.0)
  reviewCount         Int       @default(0)
  emailVerified       DateTime?
  password            String
  failedLoginAttempts Int       @default(0)
  lockoutUntil        DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  listings             Listing[]
  purchases            Transaction[]        @relation("UserPurchases")
  sales                Transaction[]        @relation("UserSales")
  sentOffers           Offer[]
  receivedReviews      Review[]             @relation("UserReceivedReviews")
  givenReviews         Review[]             @relation("UserGivenReviews")
  verificationTokens   VerificationToken[]
  passwordResetTokens  PasswordResetToken[]
  adminAuditLogs       AdminAuditLog[]

  // Indexes for performance
  @@index([email])
  @@index([role])
}

model Listing {
  id              String           @id @default(uuid())
  sellerId        String
  title           String
  description     String
  category        ListingCategory
  categoryId      String?
  condition       ListingCondition
  images          String[]
  primaryImage    String
  aiEnhancedImages Boolean         @default(false)
  aiGeneratedDesc Boolean          @default(false)
  originalImages  String[]         @default([])
  pricingType     PricingType
  price           Decimal?         @db.Decimal(10, 2)
  minOffer        Decimal?         @db.Decimal(10, 2)
  status          ListingStatus    @default(PENDING)
  rejectionReason String?
  city            String
  province        String
  views           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  approvedAt      DateTime?
  soldAt          DateTime?

  // Relations
  seller       User         @relation(fields: [sellerId], references: [id])
  categoryRel  Category?    @relation(fields: [categoryId], references: [id])
  transaction  Transaction?
  offers       Offer[]

  // Indexes for optimal query performance
  @@index([sellerId])
  @@index([status])
  @@index([category])
  @@index([createdAt])

  // Composite indexes for common filter combinations
  @@index([status, category, createdAt(sort: Desc)])  // Category browsing with sorting
  @@index([status, province, createdAt(sort: Desc)])  // Location browsing
  @@index([status, pricingType, createdAt(sort: Desc)]) // Filter by pricing type
  @@index([status, condition, createdAt(sort: Desc)])   // Filter by condition

  // Price range query optimization
  @@index([status, price])  // Price filtering and sorting

  // Multi-filter scenarios
  @@index([status, category, province]) // Category + location
  @@index([status, category, condition]) // Category + condition
}

model Transaction {
  id            String            @id @default(uuid())
  listingId     String            @unique
  buyerId       String
  sellerId      String
  amount        Decimal           @db.Decimal(10, 2)
  commission    Decimal           @db.Decimal(10, 2)
  netAmount     Decimal           @db.Decimal(10, 2)
  status        TransactionStatus @default(PENDING)
  paymentMethod String?
  createdAt     DateTime          @default(now())
  completedAt   DateTime?

  // Relations
  listing Listing @relation(fields: [listingId], references: [id])
  buyer   User    @relation("UserPurchases", fields: [buyerId], references: [id])
  seller  User    @relation("UserSales", fields: [sellerId], references: [id])
  review  Review?

  // Indexes for performance
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
}

model Offer {
  id            String      @id @default(uuid())
  listingId     String
  buyerId       String
  amount        Decimal     @db.Decimal(10, 2)
  message       String?
  status        OfferStatus @default(PENDING)
  counterAmount Decimal?    @db.Decimal(10, 2)
  expiresAt     DateTime
  createdAt     DateTime    @default(now())
  respondedAt   DateTime?

  // Relations
  listing Listing @relation(fields: [listingId], references: [id])
  buyer   User    @relation(fields: [buyerId], references: [id])

  // Indexes for performance
  @@index([listingId])
  @@index([buyerId])
  @@index([status])
  @@index([expiresAt])
  @@index([listingId, buyerId, status])
}

model Review {
  id            String   @id @default(uuid())
  transactionId String   @unique
  reviewerId    String
  revieweeId    String
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id])
  reviewer    User        @relation("UserGivenReviews", fields: [reviewerId], references: [id])
  reviewee    User        @relation("UserReceivedReviews", fields: [revieweeId], references: [id])
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  parentId    String?
  icon        String
  description String
  isActive    Boolean   @default(true)
  itemCount   Int       @default(0)
  aiGenerated Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryHierarchy")
  listings    Listing[]

  // Indexes
  @@index([slug])
  @@index([parentId])
  @@index([isActive])
  @@index([aiGenerated])
  @@index([itemCount])
}

model AdminAuditLog {
  id         String          @id @default(uuid())
  userId     String
  action     AdminAction
  targetType AuditTargetType
  targetId   String
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime        @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([action])
  @@index([targetType])
  @@index([targetId])
  @@index([createdAt])
  @@index([userId, action])
  @@index([targetType, targetId])
}
